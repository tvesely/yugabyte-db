#!/usr/bin/perl
#
# unused_oids
#
# src/include/catalog/unused_oids
#
#	finds blocks of manually-assignable oids that have not already been
#	claimed by post_hackers.  primarily useful for finding available
#	oids for new internal functions.  the numbers printed are inclusive
#	ranges of unused oids.
#
#	before using a large empty block, make sure you aren't about
#	to take over what was intended as expansion space for something
#	else.
#
#	run this script in src/include/catalog.
#
use lib '../../backend/catalog/';
use Catalog;

use strict;
use warnings;

my @input_files = (glob("pg_*.h"), qw(indexing.h toasting.h));

my $oids = Catalog::FindAllOidsFromHeaders(@input_files);

# Also push FirstBootstrapObjectId to serve as a terminator for the last gap.
my $FirstBootstrapObjectId =
  Catalog::FindDefinedSymbol('access/transam.h', [".."],
	'FirstBootstrapObjectId');
push @{$oids}, $FirstBootstrapObjectId;

my $prev_oid = 0;
foreach my $oid (sort { $a <=> $b } @{$oids})
{
	if ($oid > $prev_oid + 1)
	{
		if ($oid > $prev_oid + 2)
		{
			printf "%d - %d\n", $prev_oid + 1, $oid - 1;
		}
		else
		{
			printf "%d\n", $prev_oid + 1;
		}
	}
	elsif ($oid == $prev_oid)
	{
		print "Duplicate oid detected: $oid\n";
		exit 1;
	}
	$prev_oid = $oid;
}
