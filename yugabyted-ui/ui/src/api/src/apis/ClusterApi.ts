// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  ClusterResponse,
  ClusterSpec,
} from '../models';

export interface EditClusterForQuery {
  ClusterSpec?: ClusterSpec;
}

/**
 * Submit task to delete a Yugabyte Cluster
 * Submit task to delete a cluster
 */


export const deleteClusterMutate = (
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/cluster';
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    customAxiosInstance
  );
};

export const useDeleteClusterMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, void, unknown>(() => {
    return  deleteClusterMutate(customAxiosInstance);
  }, mutationOptions);
};


/**
 * Submit task to edit a Yugabyte Cluster
 * Submit task to edit a cluster
 */


export const editClusterMutate = (
  body: EditClusterForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  const url = '/cluster';
  return Axios<ClusterResponse>(
    {
      url,
      method: 'PUT',
      data: body.ClusterSpec
    },
    customAxiosInstance
  );
};

export const useEditClusterMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<ClusterResponse, Error>,
    customAxiosInstance?: AxiosInstance;
  }
) => {
  const {mutation: mutationOptions, customAxiosInstance} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<ClusterResponse, Error, EditClusterForQuery, unknown>((props) => {
    return  editClusterMutate(props, customAxiosInstance);
  }, mutationOptions);
};


/**
 * Get a Yugabyte Cluster
 * Get a cluster
 */

export const getClusterAxiosRequest = (
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<ClusterResponse>(
    {
      url: '/cluster',
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getClusterQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/cluster`,
  pageParam,
];


export const useGetClusterInfiniteQuery = <T = ClusterResponse, Error = ApiError>(
  options?: {
    query?: UseInfiniteQueryOptions<ClusterResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getClusterQueryKey(pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<ClusterResponse, Error, T>(
    queryKey,
    () => getClusterAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetClusterQuery = <T = ClusterResponse, Error = ApiError>(
  options?: {
    query?: UseQueryOptions<ClusterResponse, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getClusterQueryKey(version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<ClusterResponse, Error, T>(
    queryKey,
    () => getClusterAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






